#imagefilter_widescreen
import os
from PIL import Image
import shutil
import pathlib

class ImageFilter_WS():
    def __init__(self):
        ##
        self._scale_factor = 1.3
        self._file_suffixes = ('.png', '.jpg', '.webp', '.jpeg')
        self._file_prefixes = ('.trashed')
        self._ignore_dir = ('fix me', 'naughty', 'unwanted')

        self._source_path = self.__path_prompts(prompt= "Source Path:")
        self._destination_path = self.__path_prompts(prompt= "Destination Path:")

        self.__file_list()

    def __path_prompts(self, prompt: str):
        path = input(prompt)
        path = path.lower()
        if len(path) == 0:
            print("Please Input a File Path...")

        #This checks if the path exists.
        while os.path.exists(path) != True:
            print("Directory does not exist; please re-enter.")
            path = input(prompt)

        # appends "/" to end of path if not there.
        if path[-1] not in ['\\', '/']: 
            path += '/' 
        return path

    def __file_list(self):
        listing = pathlib.Path(self._source_path).iterdir()
        for file in listing:
            if file.is_file:
                self.__image_scale_check(file)

            if file.is_dir:
                #Ignore our self._destination_path if it is in the same directory as self._source_path.
                if str(file.absolute()) == self._destination_path:
                    continue
                
                for suffix in self._file_suffixes:
                    #end in `png/jpeg/jpg/webp`
                    file_list = file.glob(("*" + suffix))

                    for file in file_list:
                        self.__image_scale_check(file)
                
    def __image_scale_check(self, file: pathlib.Path):
        #ingore anything with `.trashed` at the start
        if file.name.lower().startswith(self._file_prefixes) or not file.name.lower().endswith(self._file_suffixes):
            return
        #We open the image and check its width/height.
        opened_image = Image.open(file.as_posix())
        #If its scale factor doesn't meet my min requirements, skip.
        if opened_image.width/opened_image.height < self._scale_factor:
            return

        #Close the image so we dont get a file access error.
        opened_image.close()
        #Move our image to the destination path we set.
        try:
            shutil.move(file.as_posix(), self._destination_path)
            print(f'Moved {file} from {self._source_path} to {self._destination_path}')
        except shutil.Error as e:
            print(e)
            return
            
            
ImageFilter_WS()